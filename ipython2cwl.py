
from datetime import datetime, timedelta
from textwrap import dedent
from airflow.models import Param, Variable
# The DAG object; we'll need this to instantiate a DAG
from airflow import DAG
from airflow.operators.python_operator import PythonOperator, PythonVirtualenvOperator

# Operators; we need this to operate!
from airflow.operators.bash import BashOperator

def parse_yaml_file(file_path):
    """Parse a yaml file
    Args:
        file_path (str): Path to the file
    Returns:
        dict: Parsed yaml
    """
    import yaml
    try:
        from yaml import CLoader as Loader
    except ImportError:
        from yaml import Loader
    with open(file_path, "r", encoding='utf8') as file:
        return yaml.load(file, Loader=Loader)

def repo2cwl_function():
    import pendulum
    import os
    from ipython2cwl.repo2cwl import repo2cwl

    
    now = pendulum.now()
    
    #s3 variables
    source_s3 = S3Hook(AWS_S3_CONN_ID)
    specs_s3 = []
    bucket_name = "components"
    
    #store the image_name generated by repo2cwl
    image_name = ""

    #trigger repo2cwl
    directory = os.path.abspath(os.path.dirname(__file__))
    cwl_dir = os.path.join(directory, f"cwl_{now}")
    if not os.path.exists(cwl_dir):
        os.mkdir(cwl_dir)
    repo2cwl(["https://github.com/mosoriob/MIC_model", "-o", cwl_dir])
    
    
    #upload specs to s3
    specs = os.listdir(cwl_dir)
    for spec in specs:
        parsed = parse_yaml_file(os.path.join(cwl_dir, specs[0]))
        image_name = parsed["hints"]["DockerRequirement"]["dockerImageId"]
        specs_s3.append(spec)
        source_s3.load_file(spec, spec, bucket_name, replace=True)
        
    #return the image_name and specs on s3
    return {"image_name": image_name, specs: specs_s3}
   

def login_push_function(task_instance, **kwargs):
    DOCKER_REPO = "mintcomponents"
    tag = kwargs['ds_nodash']
    params = kwargs['params']
    name = params['component_name']
    import docker
    client = docker.from_env()
    image = f"mintcomponents/{name}"
    USERNAME =  Variable.get("docker_username")
    PASSWORD = Variable.get("docker_password")
    client.login(USERNAME, PASSWORD)
    return client.api.push(image, tag)    
    
    
with DAG(
    'ipython2mint',
    # These args will get passed on to each operator
    # You can override them on a per-task basis during operator initialization
    default_args={
        'depends_on_past': False,
        'email': ['maxiosorio@gmail.com'],
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 0,
        'retry_delay': timedelta(minutes=5),
    },
    params={
        "url": Param(
            default="https://github.com/mosoriob/MIC_model",
            type="string"
        ),
    },
    description='List notebook from a git repository',
    catchup=False,
    tags=['mic'],
    start_date=datetime(2021, 1, 1),
) as dag:
    
    import os

    repo2cwl = PythonVirtualenvOperator(
        task_id='repo2cwl',
        requirements=['ipython2cwlmosorio @ git+https://github.com/mosoriob/ipython2cwl@v0.0.6', 'ipython_genutils'],
        python_callable=repo2cwl_function,
        dag=dag)

    login_push = PythonOperator(
        task_id='login_push_dockerhub',
        python_callable=login_push_function,
        provide_context=True,
        dag=dag
    )
    
    
    repo2cwl >> login_push
